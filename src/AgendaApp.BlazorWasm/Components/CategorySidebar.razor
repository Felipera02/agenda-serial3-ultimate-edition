@using AgendaApp.BlazorWasm.Models
@using AgendaApp.BlazorWasm.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="w-80">
    <!-- Lista de Categorias -->
    <div class="mb-6 overflow-y-auto flex-grow" style=" max-height: calc(100vh - 525px); min-height: calc(100vh - 525px); scrollbar-color: grey black;">
        @foreach (var category in Categories)
        {
            <div class="flex p-3 bg-gray-800 hover:bg-gray-700 transition-colors group">
                ">
                <div class="flex space-x-3">
                    <!-- Checkbox para visibilidade -->
                    <input type="checkbox"
                           checked="@category.IsVisible"
                           @onchange="@((ChangeEventArgs e) => OnCategoryVisibilityChanged.InvokeAsync((category.Id, (bool)e.Value!)))"
                           class="w-4 h-4 text-indigo-600 bg-gray-700 border-gray-600 rounded focus:ring-indigo-500" />

                    <!-- Cor da categoria -->
                    <div class="w-4 h-4 rounded-full" style="background-color: @category.Color"></div>

                    <!-- Nome da categoria -->
                    @if (editingCategoryId == category.Id)
                    {
                        <div class="flex-1">
                            <div class="space-y-2">
                                <input type="text"
                                       @bind="editingCategoryName"
                                       placeholder="Nome da categoria"
                                       class="w-full px-2 py-1 bg-gray-600 text-white border border-gray-500 rounded text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                                <div class="flex items-center space-x-2">
                                    <input type="color"
                                           @bind="editingCategoryColor"
                                           class="w-8 h-6 bg-gray-600 border border-gray-500 rounded cursor-pointer" />
                                    <button type="button" @onclick="() => SaveCategoryEdit(category.Id)"
                                            class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white px-2 py-1 rounded text-xs">
                                        Salvar
                                    </button>
                                    <button type="button" @onclick="CancelEditCategory"
                                            class="bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded text-xs">
                                        Cancelar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span class="text-white text-sm">@category.Name</span>
                    }
                </div>

                <!-- Ações (aparecem no hover) -->
                @if (editingCategoryId != category.Id)
                {
                    <div class="flex ml-auto space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                        <!-- Botão Editar -->
                        <button @onclick="() => StartEditCategory(category)"
                                class="text-gray-400 hover:text-white p-1">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>

                        <!-- Botão Excluir -->
                        <button @onclick="() => ConfirmDeleteCategory(category.Id)"
                                class="text-gray-400 hover:text-red-400 p-1">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Adicionar Nova Categoria -->
    <div>
        @if (showAddCategoryForm)
        {
            <div class="space-y-3">
                <input type="text"
                       @bind="newCategory.Name"
                       placeholder="Nome do calendário"
                       class="w-full px-3 py-2 bg-gray-800 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" />

                <div class="flex items-center space-x-2">
                    <input type="color"
                           @bind="newCategory.Color"
                           class="w-10 h-8 bg-gray-800 border border-gray-600 rounded cursor-pointer" />
                    <button @onclick="CreateCategory"
                            class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white px-3 py-2 rounded-md text-sm font-medium">
                        Salvar
                    </button>
                    <button @onclick="CancelAddCategory"
                            class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded-md text-sm font-medium">
                        Cancelar
                    </button>
                </div>
            </div>
        }
        else
        {
            <button @onclick="ShowAddCategoryForm"
                    class="w-full flex items-center justify-center space-x-2 hover:text-gray-600 text-white px-4 py-3 transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <span>Adicionar Calendário</span>
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public List<CategoryModel> Categories { get; set; } = new();
    [Parameter] public EventCallback<(int categoryId, bool isVisible)> OnCategoryVisibilityChanged { get; set; }
    [Parameter] public EventCallback OnCategoriesChanged { get; set; }

    private CategoryModel newCategory = new();
    private bool showAddCategoryForm = false;
    private int editingCategoryId = 0;
    private string editingCategoryName = "";
    private string editingCategoryColor = "";

    private void ShowAddCategoryForm()
    {
        newCategory = new CategoryModel();
        showAddCategoryForm = true;
    }

    private void CancelAddCategory()
    {
        showAddCategoryForm = false;
        newCategory = new CategoryModel();
    }

    private async Task CreateCategory()
    {
        try
        {
            var created = await ApiService.CreateCategoryAsync(newCategory);
            if (created != null)
            {
                created.IsVisible = true;
                Categories.Add(created);
                showAddCategoryForm = false;
                newCategory = new CategoryModel();
                await OnCategoriesChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao criar categoria: " + ex.Message);
        }
    }

    private void StartEditCategory(CategoryModel category)
    {
        editingCategoryId = category.Id;
        editingCategoryName = category.Name;
        editingCategoryColor = category.Color;
    }

    private async Task SaveCategoryEdit(int categoryId)
    {
        try
        {
            var category = Categories.FirstOrDefault(c => c.Id == categoryId);
            if (category != null && !string.IsNullOrWhiteSpace(editingCategoryName))
            {
                category.Name = editingCategoryName;
                category.Color = editingCategoryColor;

                var success = await ApiService.UpdateCategoryAsync(category);
                if (!success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erro ao atualizar categoria");
                }
                else
                {
                    await OnCategoriesChanged.InvokeAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao salvar categoria: " + ex.Message);
        }
        finally
        {
            editingCategoryId = 0;
            editingCategoryName = "";
            editingCategoryColor = "";
        }
    }

    private void CancelEditCategory()
    {
        editingCategoryId = 0;
        editingCategoryName = "";
        editingCategoryColor = "";
    }

    private async Task ConfirmDeleteCategory(int categoryId)
    {
        var category = Categories.FirstOrDefault(c => c.Id == categoryId);
        if (category == null) return;

        string message = "Tem certeza que deseja excluir esta categoria? Todos os compromissos desta categoria também serão excluídos.";

        if (await JSRuntime.InvokeAsync<bool>("confirm", message))
        {
            try
            {
                var success = await ApiService.DeleteCategoryAsync(categoryId);
                if (success)
                {
                    Categories.RemoveAll(c => c.Id == categoryId);
                    await OnCategoriesChanged.InvokeAsync();
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao excluir categoria: " + ex.Message);
            }
        }
    }
}
