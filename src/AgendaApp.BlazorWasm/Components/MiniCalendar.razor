@using System.Globalization
@using AgendaApp.BlazorWasm.Models

<div class="bg-black rounded-lg shadow">
    @{
        var mes = currentMonth.ToString("MMMM", CultureInfo.GetCultureInfo("pt-BR"));
        var mesAbreviado = currentMonth.ToString("MMM", CultureInfo.GetCultureInfo("pt-BR"));
        var ano = currentMonth.ToString("yyyy");
    }

    <div class="flex flex-col h-24 mb-4 space-y-2">
        <!-- Título alinhado à esquerda -->
        <h3 class="text-4xl text-left">
            <span class="text-white capitalize font-medium">@mes</span>
            <span class="text-green-500 ml-1">@ano</span>
        </h3>

        <!-- Botões centralizados abaixo -->
        <div class="flex justify-between w-full">
            <button @onclick="PreviousMonth" class="flex items-center px-3 py-1 text-sm text-white hover:text-gray-500">
                ← @mesAbreviado @ano
            </button>
            <button @onclick="NextMonth" class="flex items-center px-3 py-1 text-sm text-white hover:text-gray-500">
                @mesAbreviado @ano →
            </button>
        </div>
    </div>


    <!-- Dias da semana -->
    <div class="grid grid-cols-7 mb-2 h-6">
        @foreach (var dayName in new[] { "DOM", "SEG", "TER", "QUA", "QUI", "SEX", "SAB" })
        {
            <div class="text-center text-xs font-medium text-gray-500 w-10">
                @dayName
            </div>
        }
    </div>

    <!-- Semanas do mês -->
    <div>
        @foreach (var week in GetCalendarWeeks())
        {
            var isCurrentWeek = IsCurrentWeek(week);

            <div class="grid h-8 grid-cols-7 items-center cursor-pointer transition-colors @(isCurrentWeek ? "bg-gray-700" : "hover:bg-gray-900")"
                 @onclick="() => SelectWeek(week.First())"
                 title="Visualizar esta semana">

                @foreach (var day in week)
                {
                    var isCurrentMonth = day.Month == currentMonth.Month;
                    var isToday = day.Date == DateTime.Today;
                    var hasAppointments = Appointments.Any(a => a.StartDateTime.Date == day.Date);

                    <div class="relative h-full text-xs font-semibold rounded flex items-center justify-center
                        @(isCurrentMonth ? "text-white" : "text-gray-500")">

                        <div class="flex items-center justify-center
                             @(isToday ? "w-8 h-8 bg-blue-500 text-white" : "")">
                            @day.Day
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public DateTime CurrentWeekStart { get; set; } = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
    [Parameter] public List<AppointmentModel> Appointments { get; set; } = new();
    [Parameter] public EventCallback<DateTime> OnWeekSelected { get; set; }

    private DateTime currentMonth = DateTime.Today;

    protected override void OnInitialized()
    {
        UpdateCurrentMonth();
    }

    // NOVA FUNCIONALIDADE: Atualizar o mês quando CurrentWeekStart mudar
    protected override void OnParametersSet()
    {
        UpdateCurrentMonth();
    }

    private void UpdateCurrentMonth()
    {
        // Atualizar o mês baseado na semana atual selecionada
        var newMonth = new DateTime(CurrentWeekStart.Year, CurrentWeekStart.Month, 1);
        if (currentMonth != newMonth)
        {
            currentMonth = newMonth;
            StateHasChanged();
        }
    }

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
    }

    private async Task SelectWeek(DateTime weekStart)
    {
        // Garantir que seja o início da semana (domingo)
        var startOfWeek = weekStart.AddDays(-(int)weekStart.DayOfWeek);
        await OnWeekSelected.InvokeAsync(startOfWeek);
    }

    private bool IsCurrentWeek(List<DateTime> week)
    {
        var weekStart = week.First().AddDays(-(int)week.First().DayOfWeek);
        return weekStart.Date == CurrentWeekStart.Date;
    }

    private List<List<DateTime>> GetCalendarWeeks()
    {
        var weeks = new List<List<DateTime>>();
        var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);

        // Começar do domingo da primeira semana do mês
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);

        // Adicionar 6 semanas para cobrir todo o mês
        for (int weekIndex = 0; weekIndex < 6; weekIndex++)
        {
            var week = new List<DateTime>();
            for (int dayIndex = 0; dayIndex < 7; dayIndex++)
            {
                week.Add(startDate.AddDays(weekIndex * 7 + dayIndex));
            }
            weeks.Add(week);
        }

        return weeks;
    }
}