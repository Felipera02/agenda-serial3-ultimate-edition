@page "/login"
@using AgendaApp.BlazorWasm.Models
@using AgendaApp.BlazorWasm.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Entre na sua conta
            </h2>
        </div>
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            <div class="rounded-md shadow-sm -space-y-px">
                <div>
                    <label for="email" class="sr-only">Email</label>
                    <InputText @bind-Value="loginModel.Email" id="email" type="email" 
                               class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" 
                               placeholder="Email" />
                </div>
                <div>
                    <label for="password" class="sr-only">Senha</label>
                    <InputText @bind-Value="loginModel.Password" id="password" type="password" 
                               class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" 
                               placeholder="Senha" />
                </div>
            </div>

            <ValidationSummary class="text-red-600 text-sm" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-red-600 text-sm text-center">
                    @errorMessage
                </div>
            }

            <div>
                <button type="submit" disabled="@isLoading" 
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
                    @if (isLoading)
                    {
                        <span>Entrando...</span>
                    }
                    else
                    {
                        <span>Entrar</span>
                    }
                </button>
            </div>

            <div class="text-center">
                <a href="/register" class="font-medium text-indigo-600 hover:text-indigo-500">
                    Não tem uma conta? Cadastre-se
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var success = await AuthService.LoginAsync(loginModel);
            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Email ou senha inválidos";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao fazer login. Tente novamente.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
