@page "/"
@using AgendaApp.BlazorWasm.Models
@using AgendaApp.BlazorWasm.Services
@using AgendaApp.BlazorWasm.Components
@inject ApiService ApiService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="min-h-screen bg-black flex">
    <!-- Sidebar de Categorias -->
    <CategorySidebar Categories="@categories"
                     OnCategoryVisibilityChanged="@HandleCategoryVisibilityChanged"
                     OnCategoriesChanged="@LoadData" />

    <!-- Conteúdo Principal -->
    <div class="flex-1 flex">
        <div class="flex-1">
            <!-- Header -->
            <div class="bg-gray-900 shadow">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex justify-between items-center py-6">
                        <div class="flex items-center">
                            <h1 class="text-3xl font-bold text-white">Agenda</h1>
                        </div>
                        <div class="flex items-center space-x-4">
                            <button @onclick="Logout" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                Sair
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar Navigation -->
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center space-x-4">
                        <!-- Botões de navegação -->
                        <button @onclick="PreviousWeek" class="bg-gray-800 hover:bg-gray-700 border border-gray-600 rounded-md px-4 py-2 text-sm font-medium text-white">
                            ←
                        </button>
                        <h2 class="text-xl font-semibold text-white">
                            @GetWeekRange()
                        </h2>
                        <button @onclick="NextWeek" class="bg-gray-800 hover:bg-gray-700 border border-gray-600 rounded-md px-4 py-2 text-sm font-medium text-white">
                            →
                        </button>
                        <button @onclick="GoToToday" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                            Hoje
                        </button>
                    </div>

                    <!-- Configurações de horário -->
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center space-x-2 text-white">
                            <label class="text-sm">Horário:</label>
                            <select @bind="startHour" @bind:after="OnHourRangeChanged" class="bg-gray-800 text-white border border-gray-600 rounded px-2 py-1 text-sm">
                                @for (int i = 0; i <= 12; i++)
                                {
                                    <option value="@i">@i:00</option>
                                }
                            </select>
                            <span class="text-gray-400">até</span>
                            <select @bind="endHour" @bind:after="OnHourRangeChanged" class="bg-gray-800 text-white border border-gray-600 rounded px-2 py-1 text-sm">
                                @for (int i = 12; i <= 24; i++)
                                {
                                    <option value="@i">@i:00</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Calendar Grid -->
                <CalendarGrid WeekDays="@GetWeekDays()"
                              Appointments="@appointments"
                              Categories="@categories"
                              StartHour="@startHour"
                              EndHour="@endHour"
                              OnCellClick="@CreateAppointmentAtTime"
                              OnAppointmentClick="@EditAppointment"
                              OnAppointmentCompletedChanged="@HandleAppointmentCompletedChanged" />
            </div>
        </div>

        <!-- Mini Calendário -->
        <div class="w-64 bg-gray-900 p-6">
            <MiniCalendar CurrentWeekStart="@currentWeekStart"
                          Appointments="@appointments"
                          OnWeekSelected="@HandleWeekSelected" />
        </div>
    </div>
</div>

<!-- Appointment Modal -->
<AppointmentModal IsVisible="@showAppointmentModal"
                  Appointment="@editingAppointment"
                  Categories="@categories"
                  OnClose="@CloseAppointmentModal"
                  OnSave="@SaveAppointment"
                  OnDelete="@DeleteAppointment"
                  OnCategoriesChanged="@LoadData" />

@code {
    private List<CategoryModel> categories = new();
    private List<AppointmentModel> appointments = new();
    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
    private int startHour = 6;
    private int endHour = 23;

    private bool showAppointmentModal = false;
    private AppointmentModel? editingAppointment;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            categories = await ApiService.GetCategoriesAsync();
            // Inicializar todas as categorias como visíveis
            foreach (var category in categories)
            {
                category.IsVisible = true;
            }

            DateTime startDate = currentWeekStart;
            DateTime endDate = currentWeekStart.AddDays(7);

            appointments = await ApiService.GetAppointmentsAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao carregar dados: " + ex.Message);
        }
    }

    private void OnHourRangeChanged()
    {
        if (startHour >= endHour)
        {
            endHour = startHour + 1;
        }
        StateHasChanged();
    }

    private List<DateTime> GetWeekDays()
    {
        var days = new List<DateTime>();
        for (int i = 0; i < 7; i++)
        {
            days.Add(currentWeekStart.AddDays(i));
        }
        return days;
    }

    private string GetWeekRange()
    {
        var weekEnd = currentWeekStart.AddDays(6);
        return $"{currentWeekStart:dd/MM} - {weekEnd:dd/MM/yyyy}";
    }

    private async Task PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        await LoadData();
    }

    private async Task NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        await LoadData();
    }

    private async Task GoToToday()
    {
        currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        await LoadData();
    }

    private async Task HandleWeekSelected(DateTime weekStart)
    {
        currentWeekStart = weekStart;
        await LoadData();
    }

    private void HandleCategoryVisibilityChanged((int categoryId, bool isVisible) args)
    {
        var category = categories.FirstOrDefault(c => c.Id == args.categoryId);
        if (category != null)
        {
            category.IsVisible = args.isVisible;
        }
    }

    private async Task HandleAppointmentCompletedChanged((AppointmentModel appointment, bool isCompleted) args)
    {
        try
        {
            args.appointment.IsCompleted = args.isCompleted;
            var success = await ApiService.UpdateAppointmentAsync(args.appointment);
            if (!success)
            {
                // Reverter se falhou
                args.appointment.IsCompleted = !args.isCompleted;
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao atualizar status do compromisso");
            }
        }
        catch (Exception ex)
        {
            // Reverter se falhou
            args.appointment.IsCompleted = !args.isCompleted;
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao atualizar status: " + ex.Message);
        }
    }

    private void CreateAppointmentAtTime(DateTime dateTime)
    {
        editingAppointment = new AppointmentModel
            {
                StartDateTime = dateTime,
                EndDateTime = dateTime.AddHours(1),
                IsCompleted = false
            };
        showAppointmentModal = true;
    }

    private void EditAppointment(AppointmentModel appointment)
    {
        editingAppointment = new AppointmentModel
            {
                Id = appointment.Id,
                Title = appointment.Title,
                Description = appointment.Description,
                StartDateTime = appointment.StartDateTime,
                EndDateTime = appointment.EndDateTime,
                CategoryId = appointment.CategoryId,
                IsCompleted = appointment.IsCompleted
            };
        showAppointmentModal = true;
    }

    private async Task SaveAppointment()
    {
        if (editingAppointment == null) return;

        try
        {
            if (editingAppointment.Id == 0)
            {
                var created = await ApiService.CreateAppointmentAsync(editingAppointment);
                if (created != null)
                {
                    await LoadData();
                }
            }
            else
            {
                var success = await ApiService.UpdateAppointmentAsync(editingAppointment);
                if (success)
                {
                    await LoadData();
                }
            }
            CloseAppointmentModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao salvar compromisso: " + ex.Message);
        }
    }

    private async Task DeleteAppointment()
    {
        if (editingAppointment?.Id > 0)
        {
            try
            {
                var success = await ApiService.DeleteAppointmentAsync(editingAppointment.Id);
                if (success)
                {
                    await LoadData();
                    CloseAppointmentModal();
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao excluir compromisso: " + ex.Message);
            }
        }
    }

    private void CloseAppointmentModal()
    {
        showAppointmentModal = false;
        editingAppointment = null;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}
