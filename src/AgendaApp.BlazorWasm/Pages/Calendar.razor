@page "/"
@using AgendaApp.BlazorWasm.Models
@using AgendaApp.BlazorWasm.Services
@using AgendaApp.BlazorWasm.Components
@inject ApiService ApiService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


@if (showHint)
{
    <div class="bg-blue-50 border-b border-blue-200 px-4 py-2 flex items-center justify-between w-screen">
        <p class="text-sm text-blue-700">
            ðŸ’¡ <strong>Dica:</strong> Clique em uma cÃ©lula para criar um compromisso.
        </p>
        <button @onclick="() => showHint = false"
                class="text-blue-500 px-2 hover:text-blue-700 text-sm font-bold">
            Ã—
        </button>
    </div>
}
<!-- Layout Geral -->
<div class="flex bg-black h-screen">
    <!-- Sidebar de Categorias -->
    <div>
        <div class="p-4">
            <MiniCalendar CurrentWeekStart="@currentWeekStart"
                          Appointments="@appointments"
                          OnWeekSelected="@HandleWeekSelected" />
        </div>
        <CategorySidebar Categories="@categories"
                         OnCategoryVisibilityChanged="@HandleCategoryVisibilityChanged"
                         OnCategoriesChanged="@LoadData" />
    </div>
    <div class="w-full">
        <div class="flex bg-black h-16 items-center">
            <div class="w-full h-8 px-4 flex items-center justify-center">
                <div class="flex h-full space-x-0.5">
                    <button @onclick="PreviousWeek" class="items-center rounded-l-md flex items-center h-full bg-gray-100 hover:bg-gray-200 px-2.5 py-1  text-gray-900 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m15 19l-7-7 7-7" />
                        </svg>
                    </button>
                    <h2 class="flex items-center justify-center h-8 w-40 text-sm bg-gray-100 text-gray-900 font-medium">
                        @GetWeekRange()
                    </h2>
                    <button @onclick="NextWeek" class="items-center rounded-r-md flex items-center h-full bg-gray-100 hover:bg-gray-200 px-2.5 py-1  text-gray-900 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                        </svg>
                    </button>
                </div>
                <div class="ml-4 flex items-center h-8">
                    <button @onclick="GoToToday" class="flex items-center h-full hover:text-gray-400 text-white px-4 rounded-md text-sm transition-colors">
                        Exibir Semana Atual
                    </button>
                </div>
                <div class="ml-auto h-8 flex items-center">
                    <button @onclick="Logout" class="flex items-center h-full hover:text-red-600 text-white px-4 rounded-md transition-colors">
                        Sair
                    </button>
                </div>
            </div>
        </div>
        <div>
            <CalendarGrid WeekDays="@GetWeekDays()"
                          Appointments="@appointments"
                          Categories="@categories"
                          StartHour="0"
                          EndHour="24"
                          OnCellClick="@CreateAppointmentAtTime"
                          OnAppointmentClick="@EditAppointment"
                          OnAppointmentCompletedChanged="@HandleAppointmentCompletedChanged" />
        </div>
    </div>
</div>

<!-- Appointment Modal -->
<AppointmentModal IsVisible="@showAppointmentModal"
                  Appointment="@editingAppointment"
                  Categories="@categories"
                  OnClose="@CloseAppointmentModal"
                  OnSave="@SaveAppointment"
                  OnDelete="@DeleteAppointment"
                  OnCategoriesChanged="@LoadData" />

@code {
    private List<CategoryModel> categories = new();
    private List<AppointmentModel> appointments = new();
    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);

    private bool showAppointmentModal = false;
    private AppointmentModel? editingAppointment;

    private bool showHint = true;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadData();
        await ScrollToCurrentTime();
    }

    private async Task LoadData()
    {
        try
        {
            categories = await ApiService.GetCategoriesAsync();
            foreach (var category in categories)
            {
                category.IsVisible = true;
            }

            // CORREÃ‡ÃƒO: Buscar eventos que podem comeÃ§ar antes ou terminar depois da semana
            DateTime startDate = currentWeekStart.AddDays(-7); // Uma semana antes
            DateTime endDate = currentWeekStart.AddDays(14);   // Uma semana depois

            appointments = await ApiService.GetAppointmentsAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao carregar dados: " + ex.Message);
        }
    }

    // private void OnHourRangeChanged()
    // {
    //     if (startHour >= endHour)
    //     {
    //         endHour = startHour + 1;
    //     }
    //     StateHasChanged();
    // }

    private List<DateTime> GetWeekDays()
    {
        var days = new List<DateTime>();
        for (int i = 0; i < 7; i++)
        {
            days.Add(currentWeekStart.AddDays(i));
        }
        return days;
    }

    private string GetWeekRange()
    {
        var weekEnd = currentWeekStart.AddDays(6);
        return $"{currentWeekStart:dd/MM} - {weekEnd:dd/MM/yyyy}";
    }

    private async Task PreviousWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(-7);
        await LoadData();
    }

    private async Task NextWeek()
    {
        currentWeekStart = currentWeekStart.AddDays(7);
        await LoadData();
    }

    private async Task GoToToday()
    {
        currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        await LoadData();
        await ScrollToCurrentTime();

    }

    private async Task ScrollToCurrentTime()
    {
        // await Task.Delay(100);

        var currentHour = DateTime.Now.Hour;
        // Posicionar scroll para mostrar 2 horas antes da atual (para contexto)
        var targetHour = Math.Max(0, currentHour - 2);
        var scrollPosition = targetHour * 80; // 80px por hora

        await JSRuntime.InvokeVoidAsync("scrollToPosition", scrollPosition);
    }

    private async Task HandleWeekSelected(DateTime weekStart)
    {
        currentWeekStart = weekStart;
        await LoadData();
    }

    private void HandleCategoryVisibilityChanged((int categoryId, bool isVisible) args)
    {
        var category = categories.FirstOrDefault(c => c.Id == args.categoryId);
        if (category != null)
        {
            category.IsVisible = args.isVisible;
        }
    }

    private async Task HandleAppointmentCompletedChanged((AppointmentModel appointment, bool isCompleted) args)
    {
        try
        {
            args.appointment.IsCompleted = args.isCompleted;
            var success = await ApiService.UpdateAppointmentAsync(args.appointment);
            if (!success)
            {
                // Reverter se falhou
                args.appointment.IsCompleted = !args.isCompleted;
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao atualizar status do compromisso");
            }
        }
        catch (Exception ex)
        {
            // Reverter se falhou
            args.appointment.IsCompleted = !args.isCompleted;
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao atualizar status: " + ex.Message);
        }
    }

    private void CreateAppointmentAtTime(DateTime dateTime)
    {
        editingAppointment = new AppointmentModel
            {
                StartDateTime = dateTime,
                EndDateTime = dateTime.AddHours(1),
                IsCompleted = false
            };
        showAppointmentModal = true;
    }

    private void EditAppointment(AppointmentModel appointment)
    {
        editingAppointment = new AppointmentModel
            {
                Id = appointment.Id,
                Title = appointment.Title,
                Description = appointment.Description,
                StartDateTime = appointment.StartDateTime,
                EndDateTime = appointment.EndDateTime,
                CategoryId = appointment.CategoryId,
                IsCompleted = appointment.IsCompleted
            };
        showAppointmentModal = true;
    }

    private async Task SaveAppointment()
    {
        if (editingAppointment == null) return;

        try
        {
            if (editingAppointment.Id == 0)
            {
                var created = await ApiService.CreateAppointmentAsync(editingAppointment);
                if (created != null)
                {
                    await LoadData();
                }
            }
            else
            {
                var success = await ApiService.UpdateAppointmentAsync(editingAppointment);
                if (success)
                {
                    await LoadData();
                }
            }
            CloseAppointmentModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Erro ao salvar compromisso: " + ex.Message);
        }
    }

    private async Task DeleteAppointment()
    {
        if (editingAppointment?.Id > 0)
        {
            try
            {
                var success = await ApiService.DeleteAppointmentAsync(editingAppointment.Id);
                if (success)
                {
                    await LoadData();
                    CloseAppointmentModal();
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao excluir compromisso: " + ex.Message);
            }
        }
    }

    private void CloseAppointmentModal()
    {
        showAppointmentModal = false;
        editingAppointment = null;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}
